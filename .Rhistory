ggplot(aes(x = year, y = percent_yes)) +
geom_line()
# Modify axes for better readability
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes)) +
geom_line() +
expand_limits(y = c(0, 1)) + # Increase axis range
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) # rotate x-axis labels
# Add plot labels and title
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes)) +
geom_line() +
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes for the US in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
# Try it with multiple countries
countries <- c("Canada", "United States of America", "France", "South Africa", "India", "Japan")
by_country_year %>%
filter(country %in% countries) %>%
ggplot(aes(x = year, y = percent_yes, color = country)) + # to add color
geom_line() +
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
by_country_year %>%
filter(country %in% countries) %>%
ggplot(aes(x = year, y = percent_yes, color = country)) +
geom_line() +
facet_wrap(~ country) + # Split countries to separate plots
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
```
# Join to GDP data and create scatterplot
by_country %>%
inner_join(gdp_data %>% select(-country), by = c(country_code = "iso2c")) %>%
ggplot(aes(x = gdp_per_cap, y = percent_yes, color = region)) +
geom_point() +
geom_text(aes(label = country), vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_continuous(labels = percent_format()) + # % format for y-axis
scale_x_log10(labels = dollar_format()) + # Changes x axis to log format
expand_limits(x = 40, y = c(0,1)) + # Changes axis ranges
# scale_color_brewer(type = "qual") +
labs(x = "GDP per capita (2015 in USD)",
y = "% of yes votes in UN General Assembly",
color = "Region")
by_country_year %>%
filter(country %in% countries) %>%
ggplot(aes(x = year, y = percent_yes, color = country)) +
geom_line() +
facet_wrap(~ country) + # Split countries to separate plots
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
## Load packages
library(WDI)
?WDI
## We want to see how UN voting records correlate with region and GDP
gdp_data <- WDI(indicator = c(gdp_per_cap = "NY.GDP.PCAP.CD"), # https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
start = 2015,
end = 2015,
extra = TRUE) %>%
as_tibble()
# Redefine by_country to add country code for this analysis
by_country <- un_votes_joined %>%
group_by(country, country_code) %>%
summarize(number = n(),
percent_yes = mean(vote == "yes")) %>%
ungroup() %>%
arrange(desc(percent_yes)) %>% # Equivalent to order by in SQL
filter(number >= 100)
# Join to GDP data and create scatterplot
by_country %>%
inner_join(gdp_data %>% select(-country), by = c(country_code = "iso2c")) %>%
ggplot(aes(x = gdp_per_cap, y = percent_yes, color = region)) +
geom_point() +
geom_text(aes(label = country), vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_continuous(labels = percent_format()) + # % format for y-axis
scale_x_log10(labels = dollar_format()) + # Changes x axis to log format
expand_limits(x = 40, y = c(0,1)) + # Changes axis ranges
# scale_color_brewer(type = "qual") +
labs(x = "GDP per capita (2015 in USD)",
y = "% of yes votes in UN General Assembly",
color = "Region")
library(ggraph) # Network graph package
library(igraph) # Network graph package
library(tidygraph) #
library(widyr)
# See correlations between the US and other countries
un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE) %>%
filter(item1 == "United States of America")
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE)
set.seed(2019)
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
# Use country codes as labels
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country_code, rcid, vote_number, sort = TRUE)
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
# Use country codes as labels
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country_code, rcid, vote_number, sort = TRUE)
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE)
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
View(correlations)
# Join to GDP data and create scatterplot
by_country %>%
inner_join(gdp_data %>% select(-country), by = c(country_code = "iso2c")) %>%
ggplot(aes(x = gdp_per_cap, y = percent_yes, color = region)) +
geom_point() +
geom_text(aes(label = country), vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_continuous(labels = percent_format()) + # % format for y-axis
scale_x_log10(labels = dollar_format()) + # Changes x axis to log format
expand_limits(x = 40, y = c(0,1)) + # Changes axis ranges
# scale_color_brewer(type = "qual") +
labs(x = "GDP per capita (2015 in USD)",
y = "% of yes votes in UN General Assembly",
color = "Region")
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph()
un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE) %>%
filter(item1 == "United States of America")
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE)
# Creating network graphs of country correlations
set.seed(2019)
# Use country codes as labels
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country_code, rcid, vote_number, sort = TRUE)
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>% # tidygraph lets us convert
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
```
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph()
library(ggraph) # Network graph package
library(igraph) # Network graph package
library(tidygraph)
library(widyr)
# Using Pearson Correlation between pairs of countries. Pearson correlations show how closely two variables are linearly related.
# See correlations between the US and other countries
un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE) %>%
filter(item1 == "United States of America")
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE)
# Creating network graphs of country correlations
set.seed(2019)
# Use country codes as labels
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country_code, rcid, vote_number, sort = TRUE)
# tidygraph lets us convert data to the tbl_graph object, which is like a tibble for graph data
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph()
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
```
---
title: "Tidyverse for Excella"
author: "Amit Talapatra"
date: "11/23/2019"
output: html_document
editor_options:
chunk_output_type: console
---
```{r}
### Install Packages (You only need to run this on your machine once)
install.packages("unvotes") # Package of UN Resolution Voting Data
install.packages("WDI") # Package of World Development Indicators from World Bank
install.packages("tidyverse")
install.packages("ggraph")
install.packages("igraph")
install.packages("tidygraph")
install.packages("widyr")
```
```{r}
## Load Packages
library(unvotes)
library(WDI)
library(tidyverse)
## Get documentation on packages
??unvotes
?WDI
?tidyverse
```
```{r}
### Exploring Data with dplyr
# https://dplyr.tidyverse.org/
# filter() picks cases based on their values.
# select() picks variables based on their names.
# summarise() reduces multiple values down to a single summary.
# arrange() changes the ordering of the rows.
# mutate() adds new variables that are functions of existing variables
# View data samples
un_votes
# Pipes
filter(un_votes, country_code == "RU")
select(filter(un_votes, country_code == "RU"), rcid, country, vote)
un_votes %>%
filter(country_code == "RU") %>%
select(rcid, country, vote)
un_votes %>%
filter(country == "China")
un_votes %>%
filter(country %in% c("China","United States"))
un_votes %>%
count(vote)
un_roll_calls
# Join and select
un_votes_joined <- un_votes %>%
left_join(un_roll_calls, by = "rcid") %>% # Join un_votes to un_roll_calls
select(rcid:vote, date, short, descr) # Keep columns between rcid and vote, and a few others
# How does the US vote?
un_votes_joined %>%
filter(country_code == "US") %>% # How does the US vote?
count(vote) # Count votes
un_votes_joined
# What percentage of US votes are "yes"?
un_votes_joined %>%
filter(country_code == "US") %>% # How does the US vote?
summarize(number = n(), percent_yes = mean(vote == "yes")) # This trick can be used to find the percent "yes". This works because vote == "yes" is a boolean list that becomes 1s and 0s when when 'mean' is applied to it.
# n() Gets the number of observations in the current group
# What are the most "agreeable" countries?
un_votes_joined %>%
group_by(country) %>%
summarize(number = n(),percent_yes = mean(vote == "yes")) %>%
arrange(desc(percent_yes)) %>% # Equivalent to 'order by' in SQL
filter(number >= 100)
# Save this as an object
by_country <-
un_votes_joined %>%
group_by(country) %>%
summarize(number = n(),
percent_yes = mean(vote == "yes")) %>%
arrange(desc(percent_yes)) %>% # Equivalent to order by in SQL
filter(number >= 100)
# We're going to use lubridate to modify date columns. We need to call this package specifically because not all tidyverse packages are called when using library(tidyverse)
library(lubridate)
# Adding year to by_country
# Add a year column to the table, and reorganize to make the computation more efficient
by_country_year <- un_votes_joined %>%
mutate(year = year(date), # year() comes from lubridate
yes = vote == "yes") %>%
group_by(country, year) %>%
summarize(number = n(), percent_yes = mean(yes)) %>%
ungroup() %>% # It is recommended to ungroup before filter steps. Grouping adds metadata that can affect later transformations, and ungrouping can make later steps more efficient.
filter(number >= 10)
# A more readable (?), but less efficient way to do this
by_country_year_alt <- un_votes_joined %>%
mutate(year = year(date)) %>% # year() comes from lubridate
group_by(country, year) %>%
summarize(number = n(), percent_yes = mean(vote == "yes")) %>%
ungroup() %>% # It is recommended to ungroup before filter steps. Grouping adds metadata that can affect later transformations, and ungrouping can make later steps more efficient.
filter(number >= 10)
# Turning the vote column into a boolean is more efficient with mutate() than when doing it in the summarize step
```
```{r}
## Using ggplot2
library(scales) # Tools for axis and legend labels
?scales
theme_set(theme_light()) # Change global theme
# Building a plot of how the US has voted
# Isolate data
by_country_year %>%
filter(country == "United States of America")
# Create axes
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes))
# Add line plot
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes)) +
geom_line()
# Modify axes for better readability
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes)) +
geom_line() +
expand_limits(y = c(0, 1)) + # Increase axis range
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) # rotate x-axis labels
# Add plot labels and title
by_country_year %>%
filter(country == "United States of America") %>%
ggplot(aes(x = year, y = percent_yes)) +
geom_line() +
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes for the US in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
# Try it with multiple countries
countries <- c("Canada", "United States of America", "France", "South Africa", "India", "Japan")
by_country_year %>%
filter(country %in% countries) %>%
ggplot(aes(x = year, y = percent_yes, color = country)) + # to add color
geom_line() +
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
by_country_year %>%
filter(country %in% countries) %>%
ggplot(aes(x = year, y = percent_yes, color = country)) +
geom_line() +
facet_wrap(~ country) + # Split countries to separate plots
expand_limits(y = c(0, 1)) +
scale_x_continuous(breaks = seq(1948, 2016, 8)) + # Show x-axis by 8-year periods to visualize election changes
scale_y_continuous(labels = percent_format()) + # % format for y-axis
theme(axis.text.x = element_text(angle = -90, hjust = 1)) + # rotate x-axis labels
labs(x = "Year",
title = "% of Yes Votes in the UN General Assembly by Year",
y = "% Yes Votes") +
theme(plot.title = element_text(hjust = .5))
```
```{r}
### Exploring Data by Country Attributes (Region)
## Load packages
library(WDI)
?WDI
## We want to see how UN voting records correlate with region and GDP
gdp_data <- WDI(indicator = c(gdp_per_cap = "NY.GDP.PCAP.CD"), # https://data.worldbank.org/indicator/NY.GDP.PCAP.CD
start = 2015,
end = 2015,
extra = TRUE) %>%
as_tibble()
# Redefine by_country to add country code for this analysis
by_country <- un_votes_joined %>%
group_by(country, country_code) %>%
summarize(number = n(),
percent_yes = mean(vote == "yes")) %>%
ungroup() %>%
arrange(desc(percent_yes)) %>% # Equivalent to order by in SQL
filter(number >= 100)
# Join to GDP data and create scatterplot
by_country %>%
inner_join(gdp_data %>% select(-country), by = c(country_code = "iso2c")) %>%
ggplot(aes(x = gdp_per_cap, y = percent_yes, color = region)) +
geom_point() +
geom_text(aes(label = country), vjust = 1, hjust = 1, check_overlap = TRUE) +
scale_y_continuous(labels = percent_format()) + # % format for y-axis
scale_x_log10(labels = dollar_format()) + # Changes x axis to log format
expand_limits(x = 40, y = c(0,1)) + # Changes axis ranges
# scale_color_brewer(type = "qual") +
labs(x = "GDP per capita (2015 in USD)",
y = "% of yes votes in UN General Assembly",
color = "Region")
# gg_repel can be used to space out text labels on points
# anti_join can be used to show what was lost in the inner join
```
```{r}
### Correlations and Network Graphs
library(ggraph) # Network graph package
library(igraph) # Network graph package
library(tidygraph)
library(widyr)
# Using Pearson Correlation between pairs of countries. Pearson correlations show how closely two variables are linearly related.
# See correlations between the US and other countries
un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE) %>%
filter(item1 == "United States of America")
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country, rcid, vote_number, sort = TRUE)
# Creating network graphs of country correlations
set.seed(2019)
# Use country codes as labels
correlations <- un_votes %>%
mutate(vote_number = as.integer(vote)) %>%
pairwise_cor(country_code, rcid, vote_number, sort = TRUE)
# tidygraph lets us convert data to the tbl_graph object, which is like a tibble for graph data
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph()
# We want to plot only the top connections in the 'correlations' dataframe
correlations %>%
group_by(item1) %>%
top_n(3, correlation) %>%
head(300) %>%
as_tbl_graph() %>%
ggraph(layout = "fr") +
geom_node_point() +
geom_node_text(aes(label = name), repel = TRUE) +
geom_edge_link() +
theme_void()
```
